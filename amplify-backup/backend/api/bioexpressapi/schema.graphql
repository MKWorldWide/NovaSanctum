type Project @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String!
  description: String
  status: ProjectStatus!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
  collaborators: [String]
  data: [DataPoint]
}

type DataPoint @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  projectId: ID!
  timestamp: AWSDateTime!
  value: Float!
  unit: String
  metadata: AWSJSON
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

type Query {
  getProject(id: ID!): Project
  listProjects: [Project]
  getDataPoints(projectId: ID!): [DataPoint]
}

type Mutation {
  createProject(input: CreateProjectInput!): Project
  updateProject(input: UpdateProjectInput!): Project
  deleteProject(id: ID!): Project
  createDataPoint(input: CreateDataPointInput!): DataPoint
}

input CreateProjectInput {
  name: String!
  description: String
  status: ProjectStatus!
}

input UpdateProjectInput {
  id: ID!
  name: String
  description: String
  status: ProjectStatus
}

input CreateDataPointInput {
  projectId: ID!
  value: Float!
  unit: String
  metadata: AWSJSON
} 