name: NovaSanctum Automation Suite

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      automation_type:
        description: 'Type of automation to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependency-update
          - code-quality
          - documentation
          - security-scan
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NOVASANCTUM_TOKEN: ${{ secrets.NOVASANCTUM_TOKEN }}

jobs:
  setup-automation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NOVASANCTUM_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name 'NovaSanctum Bot'
          git config --global user.email 'bot@novasanctum.com'

  dependency-update:
    needs: setup-automation
    runs-on: ubuntu-latest
    if: github.event.inputs.automation_type == 'dependency-update' || github.event.inputs.automation_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NOVASANCTUM_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        id: check-deps
        run: |
          npm outdated --json > outdated.json || echo "{}" > outdated.json
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Create dependency update PR
        if: steps.check-deps.outputs.has_updates == 'true'
        run: |
          npm update
          git add package*.json
          git commit -m "chore: update dependencies [automated]"
          git push origin HEAD:dependency-update-$(date +%Y%m%d)

      - name: Create Pull Request
        if: steps.check-deps.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.NOVASANCTUM_TOKEN }}
          title: "chore: Automated dependency updates"
          body: |
            ## ðŸ¤– Automated Dependency Updates
            
            This PR contains automated updates to project dependencies.
            
            ### Changes:
            - Updated outdated npm packages
            - Maintained compatibility with existing codebase
            
            ### Review Checklist:
            - [ ] All tests pass
            - [ ] No breaking changes introduced
            - [ ] Performance impact assessed
            
            ---
            *This PR was automatically generated by NovaSanctum Automation Suite*
          branch: dependency-update-$(date +%Y%m%d)
          base: develop
          delete-branch: true

  code-quality:
    needs: setup-automation
    runs-on: ubuntu-latest
    if: github.event.inputs.automation_type == 'code-quality' || github.event.inputs.automation_type == 'all' || github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NOVASANCTUM_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm test

      - name: Run test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('./coverage/lcov.info', 'utf8');
            const lines = coverage.split('\n');
            const summary = lines.find(line => line.startsWith('SF:'));
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“Š Code Quality Report
            
            âœ… **Linting**: Passed
            âœ… **Type Checking**: Passed  
            âœ… **Tests**: Passed
            ðŸ“ˆ **Coverage**: Generated
            
            ---
            *Report generated by NovaSanctum Automation Suite*`
            });

  documentation:
    needs: setup-automation
    runs-on: ubuntu-latest
    if: github.event.inputs.automation_type == 'documentation' || github.event.inputs.automation_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NOVASANCTUM_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook

      # Removed auto-modification of README to avoid churn

  security-scan:
    needs: setup-automation
    runs-on: ubuntu-latest
    if: github.event.inputs.automation_type == 'security-scan' || github.event.inputs.automation_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NOVASANCTUM_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Create security report
        run: |
          echo "# ðŸ”’ Security Scan Report" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "Repository: ${{ github.repository }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Vulnerabilities Found:" >> security-report.md
          npm audit --json | jq -r '.vulnerabilities | keys[]' >> security-report.md || echo "No vulnerabilities found" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

  deploy-preview:
    needs: [code-quality, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NOVASANCTUM_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to preview environment
        run: |
          echo "Deploying preview for PR #${{ github.event.number }}"
          # Add your deployment logic here
          # Example: Deploy to Vercel, Netlify, or AWS Amplify

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸš€ Preview Deployed
            
            Your changes have been deployed to a preview environment.
            
            **Preview URL**: https://preview-${{ github.event.number }}.novasanctum.com
            
            ---
            *Deployed by NovaSanctum Automation Suite*`
            });

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup old branches
        uses: actions/github-script@v7
        with:
          script: |
            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const oldBranches = branches.filter(branch => 
              branch.name.startsWith('dependency-update-') || 
              branch.name.startsWith('docs-update-')
            ).filter(branch => {
              const date = branch.name.split('-').slice(-3).join('-');
              const branchDate = new Date(date);
              const weekAgo = new Date();
              weekAgo.setDate(weekAgo.getDate() - 7);
              return branchDate < weekAgo;
            });
            
            for (const branch of oldBranches) {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branch.name}`
                });
                console.log(`Deleted old branch: ${branch.name}`);
              } catch (error) {
                console.log(`Failed to delete branch ${branch.name}:`, error.message);
              }
            } 
